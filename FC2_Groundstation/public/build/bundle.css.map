{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\StateDisp.svelte",
    "..\\..\\Graphs.svelte",
    "..\\..\\Controls.svelte",
    "..\\..\\Data.svelte",
    "..\\..\\MainChart.svelte",
    "..\\..\\ComPortSelect.svelte",
    "..\\..\\Chart.svelte",
    "..\\..\\FinOffsetModal.svelte",
    "..\\..\\ComPortSelect.svelte",
    "..\\..\\DataRow.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\texport let name;\r\n\timport StateDisp from \"./Components/StateDisp.svelte\"\r\n\timport Graphs from \"./Components/Graphs.svelte\"\r\n\timport MainChart from \"./Components/MainChart.svelte\"\r\n\timport Controls from \"./components/Controls.svelte\"\r\n\timport Data from \"./components/Data.svelte\"\r\n\r\n\tvar connectedToRadio = false\r\n\tvar connectedToRocket = false\r\n\tvar previousState = \"\"\r\n\r\n\tvar data = {\r\n\t\trollRate: 0,\r\n\t\tfinSetpoint: 0,\r\n\t\tangle: 0,\r\n\t\tsignalStrength: 0,\r\n\t\ttime: 0\r\n\t}\r\n\tvar maxDataPoints = 50\r\n\tvar dataOverTime = []\r\n\r\n\tvar offsetL = 0\r\n\tvar offsetR = 0\r\n\r\n\twindow.api.receive(\"fromMain\", (msg) => {\r\n\t\tif(msg.command == \"data\") {\r\n\t\t\tconsole.log(msg)\r\n\t\t\t\r\n\t\t\t//Display radio status\r\n\t\t\tif(msg.status == true && state == \"Not Connected\") state = \"Radio Initialized\"\r\n\t\t\tif(msg.status == false) state = \"Radio Error\"\r\n\t\t\tconsole.log(state)\r\n\r\n\t\t\tif(typeof(msg.data) !== \"undefined\") {\r\n\t\t\t\tconsole.log(msg.data)\r\n\r\n\t\t\t\tlet command = msg.data.split(\"=\")[0]\r\n\t\t\t\tconsole.log(\"Command: \" + command)\r\n\t\t\t\tlet value = msg.data.split(\"=\")[1]\r\n\t\t\t\tconsole.log(\"Value: \" + value)\r\n\t\t\t\t//Recieve offsets\r\n\t\t\t\tif(command == \"Offsets(L,R)\") {\r\n\t\t\t\t\toffsetL = (msg.data.split(\"=\")[1]).split(\",\")[0]\r\n\t\t\t\t\toffsetR = (msg.data.split(\"=\")[1]).split(\",\")[1]\r\n\t\t\t\t\t//console.log(offsetL)\r\n\t\t\t\t\t//console.log(offsetR)\r\n\t\t\t\t}\r\n\t\t\t\tif(command == \"ping\" && value == \"pong\") {\r\n\t\t\t\t\tconnectedToRocket = true\r\n\t\t\t\t\tif(state == \"Radio Initialized\" || state == \"Radio Disconnected\") state = \"Connected to Rocket\"\r\n\t\t\t\t}\r\n\t\t\t\tif(command == \"calibrate\" && value == \"calibrating\") {\r\n\t\t\t\t\tpreviousState = state\r\n\t\t\t\t\tstate = \"Calibrating Gyro\"\r\n\t\t\t\t}\r\n\t\t\t\tif(command == \"calibrate\" && value == \"complete\") {\r\n\t\t\t\t\tstate = previousState\r\n\t\t\t\t}\r\n\t\t\t\tif(command == \"finTest\" && value == \"testing\") {\r\n\t\t\t\t\tpreviousState = state\r\n\t\t\t\t\tstate = \"Testing Fins\"\r\n\t\t\t\t}\r\n\t\t\t\tif(command == \"finTest\" && value == \"complete\") {\r\n\t\t\t\t\tstate = previousState\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tconst radioDisconnected = () => {\r\n\t\tstate = \"Not Connected\"\r\n\t}\r\n\t\r\n\t//Read data from radio every second\r\n\tsetInterval(function() {\r\n\t\tif(connectedToRadio) {\r\n\t\t\tconsole.log(\"Gettin data\")\r\n\t\t\twindow.api.send(\"toMain\", {command: \"readData\"});\r\n\t\t}\r\n\t}, 1000)\r\n\r\n\t//Preform a handshake with the rocket to make sure comms are established\r\n\tvar handshakeInterval\r\n\thandshakeInterval = setInterval(() => {\r\n\t\tconsole.log(\"Handshakin\")\r\n\t\twindow.api.send(\"toMain\", {command: \"handshake\"})\r\n\t}, 3000)\r\n\r\n\t$:if(connectedToRocket) {\r\n\t\tclearInterval(handshakeInterval)\r\n\t}\r\n\r\n\tlet state = \"Not Connected\"\r\n</script>\r\n\r\n<main>\r\n\t<StateDisp bind:connectedToRadio={connectedToRadio} state={state} radioDisconnected={radioDisconnected}></StateDisp>\r\n\t<div class=\"cont\">\r\n\t\t<Controls bind:offsetL={offsetL} bind:offsetR={offsetR}></Controls>\r\n\t</div>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 0px;\r\n\t\tmargin: 0px;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground: #2A303C;\r\n\t\toverflow-y: hidden;\r\n\t}\r\n\r\n\t.cont {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t}\r\n\r\n\t.left {\r\n\t\twidth: 20vw;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground: rgb(36, 31, 54);\r\n        box-shadow: 4px 0px 8px rgba(0, 0, 0, 0.3);\r\n\t\tpadding-top: 1vw;\r\n\t}\r\n\r\n\t.right {\r\n\t\twidth: 100%;\r\n\t\tpadding: 1vw;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n</style>",
    "<script>\r\n    export let state;\r\n    export let connectedToRadio\r\n    export let radioDisconnected\r\n    \r\n    import ComPortSelect from \"./ComPortSelect.svelte\";\r\n</script>\r\n\r\n<statedisp>\r\n    <p>State: {state}</p>\r\n\r\n    <ComPortSelect bind:connectedToRadio={connectedToRadio} radioDisconnected={radioDisconnected}></ComPortSelect>\r\n</statedisp>\r\n\r\n<style>\r\n    statedisp {\r\n        width: 100vw;\r\n        height: 7vh;\r\n        background: #2A303C;\r\n        border-bottom: 1px solid #1F242D;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        color: white;\r\n        font-size: 2vw;\r\n        font-weight: 400;\r\n    }\r\n\r\n    p {\r\n        margin-left: 10px;\r\n    }\r\n</style>",
    "<script>\r\n    import Chart from \"./Chart.svelte\"\r\n    export let rocketData\r\n    export let dataWindow\r\n</script>\r\n\r\n<graphs>\r\n    <div class=\"row\">\r\n        <Chart title=\"Roll Rate\" color={[182,40,240]} bind:rocketData={rocketData} bind:dataWindow={dataWindow} target={\"rollRate\"}></Chart>\r\n        <Chart title=\"Signal Strength\" color={[182,40,240]} bind:rocketData={rocketData} bind:dataWindow={dataWindow} target={\"signalStrength\"}></Chart>\r\n    </div>\r\n    <div class=\"row\">\r\n        <Chart title=\"Fin Setpoint\" color={[244,40,247]} bind:rocketData={rocketData} bind:dataWindow={dataWindow} target={\"finSetpoint\"}></Chart>\r\n        <Chart title=\"Estimated Angle\" color={[247,40,154]} bind:rocketData={rocketData} bind:dataWindow={dataWindow} target={\"angle\"}></Chart>\r\n    </div>\r\n</graphs>\r\n<style>\r\n    graphs {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n    .row {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n    }\r\n</style>",
    "<script>\r\n    export let offsetL\r\n    export let offsetR\r\n\r\n    var awaitingOffsets = false\r\n\r\n    import FinOffsetModal from \"./FinOffsetModal.svelte\";\r\n    import ComportSelect from \"./ComPortSelect.svelte\"\r\n\r\n    var connectBtnText = \"Connect\"\r\n    var connectBtnClass = \"btn connect\"\r\n    var modFinOffset = false\r\n\r\n    async function getOffsets() {\r\n        window.api.send(\"toMain\", {command: \"getOffsets\"})\r\n        awaitingOffsets = true\r\n    }\r\n\r\n    function calibrate() {\r\n        window.api.send(\"toMain\", {command: \"calibrate\"})\r\n    }\r\n\r\n    function finTest() {\r\n        window.api.send(\"toMain\", {command: \"finTest\"})\r\n    }\r\n\r\n    function updateOffsets() {\r\n        awaitingOffsets = false\r\n        console.log(\"New Offsets:\")\r\n        console.log(`L: ${offsetL}, R: ${offsetR}`)\r\n    }\r\n\r\n    function beginTest() {\r\n        window.api.send(\"toMain\", {command: \"beginTest\"})\r\n    }\r\n\r\n    function reset() {\r\n        window.api.send(\"toMain\", {command: \"reset\"})\r\n    }\r\n\r\n    $:offsetL,updateOffsets()\r\n</script>\r\n\r\n<controls>\r\n    <!--div class={connectBtnClass} on:click={toggleRadio}>\r\n        <p>{connectBtnText}</p>\r\n    </div-->\r\n    <div class=\"row\">\r\n        <div class=\"btn callib-gyro\" on:click={calibrate}>\r\n            <p>Calibrate</p>\r\n        </div>\r\n        <div class=\"btn fintest\" on:click={finTest}>\r\n            <p>Fin Test</p>\r\n        </div>\r\n        <div class=\"btn finoffset\" on:click={() => {modFinOffset = true}} on:click={getOffsets}>\r\n            <p>Fin Offset</p>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"btn begintest\" on:click={beginTest}>\r\n            <p>Begin Test</p>\r\n        </div>\r\n        <div class=\"btn reset\" on:click={reset}>\r\n            <p>Reset</p>\r\n        </div>\r\n        <div class=\"btn arm\">\r\n            <p>Arm</p>\r\n        </div>\r\n    </div>\r\n    \r\n    {#if modFinOffset}\r\n    <div class=\"modal\">\r\n        <FinOffsetModal bind:modFinOffset={modFinOffset} bind:offsetL={offsetL} bind:offsetR={offsetR}></FinOffsetModal>\r\n    </div>\r\n    {/if}\r\n</controls>\r\n\r\n<style>\r\n    controls {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 100%;\r\n    }\r\n\r\n    .row {\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .modal {\r\n        position: absolute;\r\n        top: 0px;\r\n        left: 0px;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    .title {\r\n        font-size: 2vw;\r\n        color: black;\r\n        margin: 0px;\r\n        margin-bottom: 1vw;\r\n        padding: 0px;\r\n    }\r\n\r\n    .btn {\r\n        width: 10vw;\r\n        height: 3vw;\r\n        margin: 0px 10px 0px 10px;\r\n        font-size: 1.5vw;\r\n        border-radius: 0.4vw;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n        color: white;\r\n        cursor: pointer;\r\n        background: #6419E6;\r\n    }\r\n\r\n    .connect {\r\n        background: #2bcc61;\r\n    }\r\n\r\n    .disconnect {\r\n        background: #e24949;\r\n    }\r\n</style>",
    "<script>\r\n    import DataRow from \"./DataRow.svelte\"\r\n    export let data\r\n</script>\r\n\r\n<data>\r\n    <!--p class=\"title\">Data:</p-->\r\n    <DataRow bind:data={data}></DataRow>\r\n</data>\r\n\r\n<style>\r\n    data {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n\r\n    .title {\r\n        font-size: 2vw;\r\n        color: black;\r\n        margin: 0px;\r\n        margin-bottom: 1vw;\r\n        padding: 0px;\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let title\r\n    export let color\r\n    export let rocketData\r\n    export let dataWindow\r\n\r\n    var numDP = 0\r\n    var labels = []\r\n    var datapoints = []\r\n    var data\r\n\r\n    //$: console.log(rocketData)\r\n    $: updateGraph(rocketData)\r\n\r\n    function updateGraph(rd) {\r\n        if(rd.length == 0) return\r\n        labels.push(rd[numDP].time)\r\n        datapoints.push(rd[numDP].rollRate)\r\n        numDP ++\r\n        \r\n        console.log(labels.length)\r\n        while(labels.length > dataWindow) {\r\n            console.log(\"Shrinkin\")\r\n            labels.shift()\r\n            datapoints.shift()\r\n            labels = labels\r\n            datapoints = datapoints\r\n        }\r\n    }\r\n\r\n    data = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: title,\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: `rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.2)`,\r\n                    borderColor: `rgba(${color[0]}, ${color[1]}, ${color[2]}, 1)`,\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }   \r\n    \r\n</script>\r\n\r\n<chart>\r\n    <div class=\"container\">\r\n        <Line data={data}></Line>\r\n    </div>\r\n</chart>\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        padding: 0.5vw;\r\n    }\r\n</style>",
    "<script>\r\n    export let connectedToRadio\r\n    export let radioDisconnected\r\n\r\n    let ports = []\r\n    var connectBtnText = \"Connect\"\r\n    var connectBtnClass = \"btn connect\"\r\n\r\n    $:if(connectedToRadio) {\r\n        connectBtnText = \"Disconnect\"\r\n        connectBtnClass = \"btn disconnect\"\r\n    } else {\r\n        connectBtnText = \"Connect\"\r\n        connectBtnClass = \"btn connect\"\r\n    }\r\n\r\n    window.api.send(\"toMain\", {command: \"getPorts\"})\r\n\r\n    window.api.receive(\"fromMain\", (msg) => {\r\n\t\tif(msg.command == \"getPorts\") {\r\n\t\t\tports = msg.data;\r\n            setPort(ports[0])\r\n\t\t}\r\n\t});\r\n\r\n    function updatePort(e) {\r\n        //console.log(e.path[0].innerText)\r\n        setPort(e.path[0].innerText)\r\n    }\r\n\r\n    function setPort(port) {\r\n        window.api.send(\"toMain\", {command: \"setPort\", data: port})\r\n    }\r\n\r\n    function toggleRadio() {\r\n        if(!connectedToRadio) {\r\n            connectedToRadio = true\r\n            window.api.send(\"toMain\", {command: \"startRadio\"});\r\n        } else {\r\n            connectedToRadio = false\r\n            radioDisconnected()\r\n            window.api.send(\"toMain\", {command: \"endRadio\"});\r\n        }\r\n    }\r\n</script>\r\n\r\n<comportselect>\r\n    <div class={connectBtnClass} on:click={toggleRadio}>\r\n        <p>{connectBtnText}</p>\r\n    </div>\r\n    <select on:change={updatePort} on:click={updatePort}>\r\n        {#each ports as port}\r\n        <option value=\"port\">{port}</option>\r\n        {/each}\r\n    </select>\r\n</comportselect>\r\n\r\n<style>\r\n    comportselect {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 1.5vw;\r\n    }\r\n\r\n    .btn {\r\n        width: 10vw;\r\n        height: 3vw;\r\n        margin-right: 20px;\r\n        border-radius: 0.4vw;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n        color: white;\r\n        cursor: pointer;\r\n        background: #2bcc61;\r\n    }\r\n\r\n    .disconnect {\r\n        background: #e24949;\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let title\r\n    export let color\r\n    export let rocketData\r\n    export let dataWindow\r\n    export let target\r\n\r\n    var numDP = 0\r\n    var labels = []\r\n    var datapoints = []\r\n    var data\r\n\r\n    for(let i = 0; i < 100; i++) {\r\n        labels.push(i)\r\n        datapoints.push(Math.random() * 20 + 50)\r\n    }\r\n\r\n    //$: console.log(rocketData)\r\n    $: updateGraph(rocketData)\r\n\r\n    function updateGraph(rd) {\r\n        if(rd.length == 0) return\r\n        labels.push(rd[numDP].time)\r\n        datapoints.push(rd[numDP][target])\r\n        numDP ++\r\n        \r\n        console.log(labels.length)\r\n        while(labels.length > dataWindow) {\r\n            console.log(\"Shrinkin\")\r\n            labels.shift()\r\n            datapoints.shift()\r\n            labels = labels\r\n            datapoints = datapoints\r\n        }\r\n    }\r\n\r\n    data = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: title,\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: `rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.2)`,\r\n                    borderColor: `rgba(${color[0]}, ${color[1]}, ${color[2]}, 1)`,\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }   \r\n</script>\r\n\r\n<chart>\r\n    <div class=\"container\">\r\n        <Line data={data}></Line>\r\n    </div>\r\n</chart>\r\n\r\n<style>\r\n    .container {\r\n        width: 33vw;\r\n        margin-top: 2vw;\r\n        padding: 0.5vw;\r\n        background: white;\r\n        border-radius: 0.5vw;\r\n    }\r\n</style>",
    "<script>\r\n    export let modFinOffset\r\n    export let offsetL\r\n    export let offsetR\r\n\r\n    function updateOffsets() {\r\n        modFinOffset = false\r\n        window.api.send(\"toMain\", {command: \"setOffset\", data:`#setOffsetL(${offsetL})`});\r\n        setTimeout(()=>{window.api.send(\"toMain\", {command: \"setOffset\", data:`#setOffsetR(${offsetR})`})},5000);\r\n    }\r\n</script>\r\n\r\n<finoffset>\r\n    <div class=\"modal\">\r\n        <div class=\"title\">\r\n            <p>Fin Offset</p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <div class=\"settinggroup\">\r\n                <p>Left Fin</p>\r\n                <input bind:value={offsetL}>\r\n            </div>\r\n            <div class=\"settinggroup\">\r\n                <p>Right Fin</p>\r\n                <input bind:value={offsetR}>\r\n            </div>\r\n        </div>\r\n        <div class=\"btn\" on:click={updateOffsets}>\r\n            <p>Apply</p>\r\n        </div>\r\n    </div>\r\n</finoffset>\r\n\r\n<style>\r\n    finoffset {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: rgba(0, 0, 0, 0.7);\r\n    }\r\n    .modal {\r\n        width: 50vw;\r\n        height: 50vh;\r\n        background: white;\r\n        border-radius: 2vw;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n    .title {\r\n        font-size: 2vw;\r\n        padding-left: 3vw;\r\n        padding-top: 1vw;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n    .title p {\r\n        margin-top: 0px;\r\n        padding-top: 0px;\r\n        margin-left: 0px;\r\n    }\r\n    .content { \r\n        width: fit-content;\r\n    }\r\n    .settinggroup {\r\n        text-align: left;\r\n    }\r\n    .settinggroup p {\r\n        margin-bottom: 0px;\r\n    }\r\n    .btn {\r\n        width: 10vw;\r\n        height: 3vw;\r\n        font-size: 1.5vw;\r\n        border-radius: 0.4vw;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n        color: white;\r\n        cursor: pointer;\r\n        margin-top: 3vw;\r\n        background: #2bcc61;\r\n    }\r\n</style>",
    "<script>\r\n    export let connectedToRadio\r\n    export let radioDisconnected\r\n\r\n    let ports = []\r\n    var connectBtnText = \"Connect\"\r\n    var connectBtnClass = \"btn connect\"\r\n\r\n    $:if(connectedToRadio) {\r\n        connectBtnText = \"Disconnect\"\r\n        connectBtnClass = \"btn disconnect\"\r\n    } else {\r\n        connectBtnText = \"Connect\"\r\n        connectBtnClass = \"btn connect\"\r\n    }\r\n\r\n    window.api.send(\"toMain\", {command: \"getPorts\"})\r\n\r\n    window.api.receive(\"fromMain\", (msg) => {\r\n\t\tif(msg.command == \"getPorts\") {\r\n\t\t\tports = msg.data;\r\n            setPort(ports[0])\r\n\t\t}\r\n\t});\r\n\r\n    function updatePort(e) {\r\n        //console.log(e.path[0].innerText)\r\n        setPort(e.path[0].innerText)\r\n    }\r\n\r\n    function setPort(port) {\r\n        window.api.send(\"toMain\", {command: \"setPort\", data: port})\r\n    }\r\n\r\n    function toggleRadio() {\r\n        if(!connectedToRadio) {\r\n            connectedToRadio = true\r\n            window.api.send(\"toMain\", {command: \"startRadio\"});\r\n        } else {\r\n            connectedToRadio = false\r\n            radioDisconnected()\r\n            window.api.send(\"toMain\", {command: \"endRadio\"});\r\n        }\r\n    }\r\n</script>\r\n\r\n<comportselect>\r\n    <div class={connectBtnClass} on:click={toggleRadio}>\r\n        <p>{connectBtnText}</p>\r\n    </div>\r\n    <select on:change={updatePort} on:click={updatePort}>\r\n        {#each ports as port}\r\n        <option value=\"port\">{port}</option>\r\n        {/each}\r\n    </select>\r\n</comportselect>\r\n\r\n<style>\r\n    comportselect {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 1.5vw;\r\n    }\r\n\r\n    .btn {\r\n        width: 10vw;\r\n        height: 3vw;\r\n        margin-right: 20px;\r\n        border-radius: 0.4vw;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n        color: white;\r\n        cursor: pointer;\r\n        background: #2bcc61;\r\n    }\r\n\r\n    .disconnect {\r\n        background: #e24949;\r\n    }\r\n</style>",
    "<script>\r\n    export let data\r\n</script>\r\n\r\n<datarow>\r\n    <div class=\"row\">\r\n        <div class=\"item\">\r\n            <p class=\"title\">Roll Rate</p>\r\n            <p class=\"value\">{data.rollRate} deg/sec</p>\r\n        </div>\r\n        <div class=\"item\">\r\n            <p class=\"title\">Signal Strength</p>\r\n            <p class=\"value\">{data.signalStrength} Db</p>\r\n        </div>\r\n        <div class=\"item\">\r\n            <p class=\"title\">Fin Setpoint</p>\r\n            <p class=\"value\">{data.finSetpoint} deg</p>\r\n        </div>\r\n        <div class=\"item\">\r\n            <p class=\"title\">Angle</p>\r\n            <p class=\"value\">{data.angle} deg</p>\r\n        </div>\r\n    </div>\r\n</datarow>\r\n\r\n<style>\r\n    .row {\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 100%;\r\n    }\r\n\r\n    .item {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-left: 2vw;\r\n        margin-right: 2vw;\r\n        padding: 1vw;\r\n        padding-bottom: 0.75vw;\r\n        background: linear-gradient(45deg, #0cebeb, #29ffc6);\r\n        border-radius: 0.5vw;\r\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n        width: 10vw;\r\n        border: 1px solid #8b8b8b;\r\n    }\r\n\r\n    .item p {\r\n        margin: 0px;\r\n        padding: 0px;\r\n    }\r\n\r\n    .title {\r\n        font-size: 1.25vw;\r\n        width: 100%;\r\n        text-align: left;\r\n    }\r\n\r\n    .value {\r\n        font-size: 2vw;\r\n        width: 100%;\r\n        text-align: left;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}